pipeline {
    agent any

    environment {
        COMPOSE_FILE = 'docker-compose.yml'
        PROJECT_NAME = 'chatapp'
        BACKEND_DIR = 'backend'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/duykhanhdeveloper93/chatApp3'
            }
        }

        stage('Start DB for Migration') {
            steps {
                sh '''
                    echo "üê≥ Kh·ªüi ƒë·ªông t·∫°m MySQL container..."
                    docker-compose -p $PROJECT_NAME -f $COMPOSE_FILE up -d mysql

                    echo "‚è≥ Ch·ªù MySQL kh·ªüi ƒë·ªông..."
                    sleep 15
                '''
            }
        }

        stage('Generate Migration Inside Backend Container') {
            steps {
                sh '''
                    echo "üê≥ Kh·ªüi ƒë·ªông t·∫°m backend container ƒë·ªÉ sinh migration..."
                    docker-compose -p $PROJECT_NAME -f $COMPOSE_FILE up -d backend

                    echo "üïí ƒê·ª£i backend container kh·ªüi ƒë·ªông ·ªïn ƒë·ªãnh..."

                    # Th·ª≠ ch·ªù backend healthy (n·∫øu c√≥ healthcheck)
                    for i in $(seq 1 15); do
                        STATUS=$(docker inspect -f {{.State.Health.Status}} chat-backend 2>/dev/null || echo "starting")
                        if [ "$STATUS" = "healthy" ]; then
                            echo "‚úÖ Backend healthy!"
                            break
                        fi
                        echo "‚è≥ Backend ch∆∞a s·∫µn s√†ng ($i/15)..."
                        sleep 3
                    done

                    echo "üß† Sinh migration m·ªõi..."
                    MIGRATION_NAME="AutoGenerated$(date +%s)"

                    docker exec chat-backend npx ts-node -r tsconfig-paths/register ./node_modules/typeorm/cli.js migration:generate \
                        -d src/data-source.ts src/migrations/$MIGRATION_NAME \
                        || echo "‚ö†Ô∏è Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë·ªÉ generate"

                    echo "üßπ D·ª´ng container t·∫°m..."
                    docker-compose -p $PROJECT_NAME -f $COMPOSE_FILE down || true
                '''
            }
        }

        stage('Rebuild & Deploy') {
            steps {
                sh '''
                    echo "üöÄ Build & kh·ªüi ƒë·ªông l·∫°i to√†n b·ªô project..."
                    docker-compose -p $PROJECT_NAME -f $COMPOSE_FILE up -d --build

                    echo "‚è≥ ƒê·ª£i backend kh·ªüi ƒë·ªông ƒë·ªÉ ch·∫°y migration..."
                    sleep 15

                    echo "‚öôÔ∏è Ch·∫°y migration trong container backend..."
                    docker exec chat-backend npx typeorm migration:run -d dist/data-source.js \
                        || echo "‚ö†Ô∏è Kh√¥ng c√≥ migration n√†o ƒë·ªÉ ch·∫°y"
                '''
            }
        }
    }

    post {
        success {
            echo '‚úÖ Tri·ªÉn khai th√†nh c√¥ng!'
        }
        failure {
            echo '‚ùå Tri·ªÉn khai th·∫•t b·∫°i!'
        }
    }
}
